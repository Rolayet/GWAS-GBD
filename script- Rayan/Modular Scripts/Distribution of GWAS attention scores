############################################################################
### Distribution of GWAS attention scores across four different approaches ###
############################################################################


1-dataset_EFO
total_attention_score
weighted_attention_score_impact_factor
weighted_nhits

2-dataset_Ncase
total_attention_score

## Load necessary libraries
library(ggplot2)
library(gridExtra)

## Read the data from both datasets
dataset_EFO <- fread("/Users/rayanaloliet/Desktop/review/code/EFO_merged_dataset_exclude_Injuries.csv")
dataset_Ncase<- fread("/Users/rayanaloliet/Desktop/review/code/Ncase_merged_dataset_exclude_Injuries.csv")


## To enhance the visualization, we will apply a logarithmic scale. To avoid infinite values, we will replace both DALY values and attention scores 
with 0.9 Ã— (minimum value) / 2 wherever necessary.


# Step 1: Define helper functions 

# Function to adjust zero values in any variable
adjust_zero_values <- function(x) {
  if (all(x == 0, na.rm = TRUE)) return(x)  # All zeros, return as is
  
  positive_vals <- x[x > 0]
  if (length(positive_vals) == 0) stop("No positive values found to base adjustment on.")
  
  min_val <- min(positive_vals, na.rm = TRUE)
  small_value <- 0.9 * min_val / 2
  
  # Replace zeros
  x[x == 0] <- small_value
  return(x)
}

# Function specifically for adjusting DALY (same logic as above)
adjust_daly_values <- function(x) {
  if (all(x == 0, na.rm = TRUE)) return(x)
  
  positive_vals <- x[x > 0]
  if (length(positive_vals) == 0) stop("No positive DALY values found to base adjustment on.")
  
  min_val <- min(positive_vals, na.rm = TRUE)
  small_value <- 0.9 * min_val / 2
  
  x[x == 0] <- small_value
  return(x)
}

# Step 2: Adjust DALY columns 
dataset_EFO$DALY <- adjust_daly_values(dataset_EFO$DALY)
dataset_Ncase$DALY <- adjust_daly_values(dataset_Ncase$DALY)

# Step 3: Adjust other score columns 
dataset_EFO$total_attention_score <- adjust_zero_values(dataset_EFO$total_attention_score)
dataset_EFO$weighted_attention_score_impact_factor <- adjust_zero_values(dataset_EFO$weighted_attention_score_impact_factor)
dataset_EFO$weighted_nhits <- adjust_zero_values(dataset_EFO$weighted_nhits)

dataset_Ncase$total_attention_score <- adjust_zero_values(dataset_Ncase$total_attention_score)

# Step 4: Apply dataset-specific scaling 
EFO_scaling_factor <- max(dataset_EFO$total_attention_score, na.rm = TRUE) / max(dataset_EFO$total_attention_score, na.rm = TRUE)
Ncase_scaling_factor <- max(dataset_Ncase$total_attention_score, na.rm = TRUE) / max(dataset_Ncase$total_attention_score, na.rm = TRUE)

# Apply scaling
dataset_EFO$total_attention_score <- dataset_EFO$total_attention_score * EFO_scaling_factor
dataset_EFO$weighted_attention_score_impact_factor <- dataset_EFO$weighted_attention_score_impact_factor * EFO_scaling_factor
dataset_EFO$weighted_nhits <- dataset_EFO$weighted_nhits * EFO_scaling_factor

dataset_Ncase$total_attention_score <- dataset_Ncase$total_attention_score * Ncase_scaling_factor

# Step 5: Plotting 

# Plot for the EFO dataset (total_attention_score)
plot_EFO_total_attention <- ggplot(dataset_EFO, aes(x = DALY, y = total_attention_score)) +
  geom_point(alpha = 0.5, color = "#6699CC") +
  scale_x_log10() +
  scale_y_log10(name = "Total Attention Score (EFO)") +
  labs(title = "EFO: Total Attention Score Relative to DALY", x = "DALY") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_line(color = "grey90"),
        panel.grid.minor = element_line(color = "grey95"))

# Plot for the Ncase dataset (total_attention_score)
plot_Ncase_total_attention <- ggplot(dataset_Ncase, aes(x = DALY, y = total_attention_score)) +
  geom_point(alpha = 0.5, color = "#FF9999") +
  scale_x_log10() +
  scale_y_log10(name = "Total Attention Score (Ncase)") +
  labs(title = "Ncase: Total Attention Score Relative to DALY", x = "DALY") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_line(color = "grey90"),
        panel.grid.minor = element_line(color = "grey95"))

# Plot for the EFO dataset (weighted_attention_score_impact_factor)
plot_EFO_weighted_attention <- ggplot(dataset_EFO, aes(x = DALY, y = weighted_attention_score_impact_factor)) +
  geom_point(alpha = 0.5, color = "#99CCFF") +
  scale_x_log10() +
  scale_y_log10(name = "Weighted Attention Score Impact Factor (EFO, Scaled)") +
  labs(title = "EFO: Weighted Attention Score Impact Factor Relative to DALY", x = "DALY") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_line(color = "grey90"),
        panel.grid.minor = element_line(color = "grey95"))

# Plot for the EFO dataset (weighted_nhits)
plot_EFO_weighted_nhits <- ggplot(dataset_EFO, aes(x = DALY, y = weighted_nhits)) +
  geom_point(alpha = 0.5, color = "#FFCC99") +
  scale_x_log10() +
  scale_y_log10(name = "Weighted NHits (EFO)") +
  labs(title = "EFO: Weighted NHits Relative to DALY", x = "DALY") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.major = element_line(color = "grey90"),
        panel.grid.minor = element_line(color = "grey95"))

# Display all four plots side by side using gridExtra package
library(gridExtra)
grid.arrange(plot_EFO_total_attention, plot_Ncase_total_attention, 
             plot_EFO_weighted_attention, plot_EFO_weighted_nhits, 
             ncol = 2)



