#######################################################
### Finding a match via EFO between GWAS and GBD – Part 2 (GBD terms with descendants) ###
#######################################################

## Ensure consistent formatting, cleaning and standardize of the EFO terms

# Define utility functions
format_identifier <- function(identifier) {
  formatted <- gsub(" ", "", identifier) # Remove any spaces
  formatted <- toupper(formatted) # Convert to uppercase
  formatted <- gsub("([A-Z]+)([0-9]+)", "\\1:\\2", formatted) # Add colon
  return(formatted)
}

revert_identifier <- function(identifier) {
  reverted <- gsub(":", "", identifier) # Remove colons
  return(tolower(reverted)) # Convert to lowercase
}

clean_mapped_trait_uri <- function(uri) {
  uri <- tolower(uri) # Convert to lowercase
  uri <- trimws(uri) # Trim leading/trailing whitespace
  uri <- gsub("\\s+", "", uri) # Remove all internal spaces explicitly
  uri <- gsub("\"", "", uri) # Remove quotation marks
  uri <- gsub("_", ":", uri) # Replace _ with :
  uri <- gsub("[:\\s]", "", uri) # Remove colons and spaces
  uri <- sub(".*[:/]", "", uri) # Remove prefixes and ensure consistency
  return(uri)
}

# Read data file (Due to the file size, it can be downloaded from: https://www.ebi.ac.uk/efo/)
ontology <- get_OBO("efo-obo.txt")

# Read GBD Second part with descendants
Second_part_GBD <- read_excel("Second_part_GBD.xlsx")


# List of causes in level 0, 1 and 2 to exclude (32)
exclude_causes <- c(
  "All causes", 
  "Communicable, maternal, neonatal, and nutritional diseases",
  "HIV/AIDS and sexually transmitted infections",
  "Respiratory infections and tuberculosis",
  "Enteric infections",
  "Neglected tropical diseases and malaria",
  "Other infectious diseases",
  "Maternal and neonatal disorders",
  "Nutritional deficiencies",
  "Non-communicable diseases",
  "Neoplasms",
  "Cardiovascular diseases",
  "Chronic respiratory diseases",
  "Digestive diseases",
  "Neurological disorders",
  "Mental disorders",
  "Substance use disorders",
  "Diabetes and kidney diseases",
  "Skin and subcutaneous diseases",
  "Sense organ diseases",
  "Musculoskeletal disorders",
  "Other non-communicable diseases",
  "Injuries",
  "Transport injuries",
  "Unintentional injuries",
  "Self-harm and interpersonal violence",
  "Other COVID-19 pandemic-related outcomes",
  "Total cancers",
  "Total burden related to hepatitis B",
  "Total burden related to hepatitis C",
  "Total burden related to Non-alcoholic fatty liver disease (NAFLD)",
  "Total Cancers excluding Non-melanoma skin cancer"
)

# Filter the dataset to exclude the specified causes
Second_part_GBD <- Second_part_GBD %>%
  filter(!`GBD term` %in% exclude_causes)

# Additional causes under injuries category to exclude in level 3 and 4 (37)
additional_exclude_causes <- c(
  "Road injuries",
  "Pedestrian road injuries",
  "Cyclist road injuries",
  "Motorcyclist road injuries",
  "Motor vehicle road injuries",
  "Other road injuries",
  "Other transport injuries",
  "Falls",
  "Drowning",
  "Fire, heat, and hot substances",
  "Poisonings",
  "Poisoning by carbon monoxide",
  "Poisoning by other means",
  "Exposure to mechanical forces",
  "Unintentional firearm injuries",
  "Other exposure to mechanical forces",
  "Adverse effects of medical treatment",
  "Animal contact",
  "Venomous animal contact",
  "Non-venomous animal contact",
  "Foreign body",
  "Pulmonary aspiration and foreign body in airway",
  "Foreign body in eyes",
  "Foreign body in other body part",
  "Environmental heat and cold exposure",
  "Exposure to forces of nature",
  "Other unintentional injuries",
  "Self-harm",
  "Self-harm by firearm",
  "Self-harm by other specified means",
  "Interpersonal violence",
  "Physical violence by firearm",
  "Physical violence by sharp object",
  "Sexual violence",
  "Physical violence by other means",
  "Conflict and terrorism",
  "Police conflict and executions"
  )

# Combine the original exclude list with the additional causes
exclude_causes <- c(exclude_causes, additional_exclude_causes)

# Filter the dataset to exclude the specified causes
Second_part_GBD <- Second_part_GBD %>%
  filter(!`GBD term` %in% exclude_causes)



# Extract and combine identifiers from Second_part_GBD
identifiers_list <- list(
  Second_part_GBD$`MAPPED_TRAIT_URI...2`,
  Second_part_GBD$`MAPPED_TRAIT_URI...3`,
  Second_part_GBD$`MAPPED_TRAIT_URI...4`,
  Second_part_GBD$`MAPPED_TRAIT_URI...5`,
  Second_part_GBD$`MAPPED_TRAIT_URI...6`,
  Second_part_GBD$`MAPPED_TRAIT_URI...7`,
  Second_part_GBD$`MAPPED_TRAIT_URI...8`,
  Second_part_GBD$`MAPPED_TRAIT_URI...9`,
  Second_part_GBD$`MAPPED_TRAIT_URI...10`,
  Second_part_GBD$`MAPPED_TRAIT_URI...11`,
  Second_part_GBD$`MAPPED_TRAIT_URI...12`,
  Second_part_GBD$`MAPPED_TRAIT_URI...13`
)
identifiers <- do.call(c, lapply(identifiers_list, na.omit))

# Format the identifiers
formatted_identifiers <- sapply(identifiers, format_identifier)

# Extract descendants for each identifier
descendants_list <- list()
for (i in 1:length(formatted_identifiers)) {
  id <- formatted_identifiers[i]
  if (id %in% ontology$id) {
    descendants <- get_descendants(ontology, id)
    descendants_list[[id]] <- descendants
  } else {
    descendants_list[[id]] <- NA
  }
}

# Determine the maximum number of descendants
max_descendants <- max(sapply(descendants_list, function(x) if (is.null(x) || all(is.na(x))) 0 else length(x)), na.rm = TRUE)

# Create a data frame for descendants
descendants_df <- data.frame(MAPPED_TRAIT_URI = character(), stringsAsFactors = FALSE)
for (i in 1:max_descendants) {
  descendants_df[paste0("Descendant_", i)] <- character()
}

# Populate the data frame with identifiers and their descendants
for (i in seq_along(formatted_identifiers)) {
  id <- formatted_identifiers[i]
  descendants <- descendants_list[[id]]
  if (is.null(descendants) || all(is.na(descendants))) {
    row <- c(MAPPED_TRAIT_URI = id, rep("", max_descendants))
  } else {
    row <- c(MAPPED_TRAIT_URI = id, descendants, rep("", max_descendants - length(descendants)))
  }
  
  row_df <- as.data.frame(t(row), stringsAsFactors = FALSE)
  colnames(row_df) <- colnames(descendants_df)
  descendants_df <- rbind(descendants_df, row_df)
}

# Convert columns to character type
descendants_df[] <- lapply(descendants_df, as.character)

# Add the GBD_TERM column
gbd_terms <- Second_part_GBD$`GBD term`
descendants_df$GBD_TERM <- gbd_terms[match(descendants_df$MAPPED_TRAIT_URI, formatted_identifiers)]

# Reorder columns to place GBD_TERM after MAPPED_TRAIT_URI
if ("GBD_TERM" %in% colnames(descendants_df)) {
  descendants_df <- descendants_df %>% select(MAPPED_TRAIT_URI, GBD_TERM, everything())
}

# Revert the identifiers to their original format
descendants_df <- descendants_df %>% mutate(across(c(MAPPED_TRAIT_URI, starts_with("Descendant_")), ~sapply(., revert_identifier)))

# Ensure identifiers are formatted correctly in attention
attention <- attention %>% mutate(MAPPED_TRAIT_URI = format_identifier(MAPPED_TRAIT_URI))

# Remove duplicates in both data frames
attention <- attention %>% distinct(MAPPED_TRAIT_URI, .keep_all = TRUE)
descendants_df <- descendants_df %>% distinct(MAPPED_TRAIT_URI, .keep_all = TRUE)

# Reshape descendants_df to long format
descendants_long <- descendants_df %>%
  pivot_longer(cols = starts_with("Descendant_"), names_to = "Descendant", values_to = "Descendant_URI") %>%
  filter(Descendant_URI != "") %>%
  select(MAPPED_TRAIT_URI, GBD_TERM, Descendant_URI)

# Clean and standardize Descendant_URI
descendants_long$Descendant_URI <- tolower(trimws(descendants_long$Descendant_URI))
descendants_long$Descendant_URI <- gsub("\\s+", "", descendants_long$Descendant_URI)
descendants_long$Descendant_URI <- gsub(" ", "", descendants_long$Descendant_URI)
descendants_long$Descendant_URI <- gsub("[:\\s]", "", descendants_long$Descendant_URI)
descendants_long$Descendant_URI <- gsub("\"", "", descendants_long$Descendant_URI)
descendants_long$Descendant_URI <- gsub("_", ":", descendants_long$Descendant_URI)
descendants_long$Descendant_URI <- str_squish(descendants_long$Descendant_URI)
descendants_long <- descendants_long %>% distinct(Descendant_URI, .keep_all = TRUE)

# Clean and standardize MAPPED_TRAIT_URI in attention
attention$MAPPED_TRAIT_URI <- clean_mapped_trait_uri(attention$MAPPED_TRAIT_URI)

# Identify matched entries
matched_entries <- attention %>%
  filter(MAPPED_TRAIT_URI %in% descendants_long$Descendant_URI) %>%
  left_join(descendants_long %>% select(Descendant_URI, GBD_TERM), by = c("MAPPED_TRAIT_URI" = "Descendant_URI"))

  
   # Group by GBD term  and summarize within these groups 
 intermediate_summary <- matched_entries %>%
  group_by(GBD_TERM,PUBMEDID) %>%
  summarise(
    total_ncase = sum(total_ncase, na.rm = TRUE),
    .groups = "drop"
  )
 
    # Group by GBD term  and summarize within these groups 
 unique_matched_gbd_terms_Second_part_GBD <- intermediate_summary %>%
  group_by(GBD_TERM) %>%
  summarise(
    total_ncase = sum(total_ncase, na.rm = TRUE),
    .groups = "drop"
  )
 
# Identify unmatched GBD entries based on GBD_TERM in both datasets
# First, extract unique GBD terms from both datasets
matched_gbd_terms <- matched_entries$GBD_TERM %>% unique()
unmatched_gbd_terms <- Second_part_GBD$`GBD term` %>% unique()

# Identify unmatched GBD terms
unique_unmatched_gbd_terms <- setdiff(unmatched_gbd_terms, matched_gbd_terms)

# Filter the Second_part_GBD dataframe to get rows with these unique unmatched GBD terms
unique_unmatched_gbd_terms_Second_part_GBD <- Second_part_GBD %>%
  filter(`GBD term` %in% unique_unmatched_gbd_terms)


# Save the data frames to Excel files
#write.xlsx(unique_unmatched_gbd_terms_Second_part_GBD, unique_unmatched_gbd_terms_Second_part_GBD.xlsx")
#write.xlsx(unique_matched_gbd_terms_Second_part_GBD, "unique_matched_gbd_terms_Second_part_GBD.xlsx")



## Combining the results for the unmatched and matched GBDs

# List of columns to keep for unmatched terms
columns_unmatched <- c("GBD term")


# Select only the necessary columns from the first unmatched data frame
unique_unmatched_gbd_terms_First_part_GBD <- unique_unmatched_gbd_terms_First_part_GBD[, columns_unmatched]


# Select and order the columns to match the first unmatched data frame
unique_unmatched_gbd_terms_Second_part_GBD <- unique_unmatched_gbd_terms_Second_part_GBD[, columns_unmatched]

# Combine the unmatched terms
combined_unmatched_terms <- rbind(unique_unmatched_gbd_terms_First_part_GBD, unique_unmatched_gbd_terms_Second_part_GBD)

# Display the results
print("Combined Unmatched Terms:")
print(combined_unmatched_terms)


# Rename the column in the second matched data frame
names(unique_matched_gbd_terms_Second_part_GBD)[which(names(unique_matched_gbd_terms_Second_part_GBD) == "GBD_TERM")] <- "GBD term"

# remove na 
unique_matched_gbd_terms_Second_part_GBD <- unique_matched_gbd_terms_Second_part_GBD %>%
  filter(!is.na(`GBD term`))


# Combine the matched terms
combined_matched_terms <- rbind(unique_matched_gbd_terms_First_part_GBD, unique_matched_gbd_terms_Second_part_GBD)

# Display the results
print("Combined Matched Terms:")
print(combined_matched_terms)

# Remove NA in combined_matched_terms 
combined_matched_terms <- combined_matched_terms %>%
  drop_na()

#write.xlsx(combined_matched_terms, combined_matched_terms.xlsx")
#write.xlsx(combined_unmatched_terms, "combined_unmatched_terms.xlsx")

